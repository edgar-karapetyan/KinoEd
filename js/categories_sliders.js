const now = new Date();
const toUpdatedAt = now.toISOString();
const from = new Date();
from.setDate(from.getDate() - 30);
const fromUpdatedAt = from.toISOString();
const dhis_year = Number(fromUpdatedAt.slice(0, 4))

const ageRestriction = 18;
const API = {
    BASE: "https://catalog-sync-api.rstprgapipt.com",
    KEY: "eyJhbGciOiJIUzI1NiJ9.eyJ3ZWJTaXRlIjoiMzYzIiwiaXNzIjoiYXBpLXdlYm1hc3RlciIsInN1YiI6IjQwMiIsImlhdCI6MTc1OTQzMzY4NywianRpIjoiZWQ1NTBjYmQtYTY2Mi00M2QyLWIyMzEtNGI0YmZiMmU0OGJmIiwic2NvcGUiOiJETEUifQ._wDSGrMovlDKeMXfpZT9lwDm0TrS3rMXf2T-chNzgy0"
};

// –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–∞–π–¥–µ—Ä–∞
const sliderStates = new Map();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
const LOAD_CONFIG = {
    INITIAL_LOAD: 20,
    LOAD_MORE: 20,
    TRIGGER_LOAD_AT: 0.5
};

// ID –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤ –∏ –º—É–ª—å—Ç—Å–µ—Ä–∏–∞–ª–æ–≤ (–∏—Å–∫–ª—é—á–∞–µ–º –∏–∑ –æ–±—ã—á–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤)
const MULTFILM_GENRE_IDS = [5, 40, 138]; // –ú—É–ª—å—Ç—Ñ–∏–ª—å–º, –ê–Ω–∏–º–µ, –î–µ—Ç—Å–∫–∏–π

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞) –∏–∑ HTML
const CONTENT_TYPES = {
    MOVIE: "4",        // –§–∏–ª—å–º—ã
    SERIES: "2",       // –°–µ—Ä–∏–∞–ª—ã
    MULTFILM: "12",    // –ú—É–ª—å—Ç—Ñ–∏–ª—å–º
    MULTSERIAL: "10",  // –ú—É–ª—å—Ç—Å–µ—Ä–∏–∞–ª
    ANIME: "11",       // –ê–Ω–∏–º–µ
    DOCUMENTARY: "3",  // –î–æ–∫—É—Ñ–∏–ª—å–º—ã
    DOCSERIES: "5",    // –î–æ–∫—É—Å–µ—Ä–∏–∞–ª—ã
    CONCERT: "6",      // –ö–æ–Ω—Ü–µ—Ä—Ç—ã
    TVSHOW: "7"        // –¢–í –®–æ—É
};

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –º—É–ª—å—Ç–∏–∫–æ–º
function isMultfilm(content) {
    if (!content.genres || !Array.isArray(content.genres)) return false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∂–∞–Ω—Ä–∞–º
    const hasMultfilmGenre = content.genres.some(genre =>
        MULTFILM_GENRE_IDS.includes(genre.id)
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const isMultfilmType = content.contentType &&
        (content.contentType.id == CONTENT_TYPES.MULTFILM ||
            content.contentType.id == CONTENT_TYPES.MULTSERIAL ||
            content.contentType.id == CONTENT_TYPES.ANIME);

    return hasMultfilmGenre || isMultfilmType;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–∞ —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
async function createSlider(config) {
    const {
        containerId,
        swiperClass,
        nextBtnClass,
        prevBtnClass,
        genreId,
        contentTypeId, // ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)
        ageRestriction = '18+',
        yearRange = [dhis_year, dhis_year - 1],
    } = config;

    const swiperWrapper = document.getElementById(containerId);

    if (!swiperWrapper) {
        console.error(`–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å id=${containerId}`);
        return;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–∞
    sliderStates.set(containerId, {
        currentPage: 1,
        isLoading: false,
        hasMore: true,
        allMovies: [],
        totalLoaded: 0,
        lastLoadIndex: 0
    });

    const state = sliderStates.get(containerId);

    // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å–º–æ–≤
    const loadMovies = async (page = 1, pageSize = LOAD_CONFIG.INITIAL_LOAD) => {
        if (state.isLoading || !state.hasMore) return [];

        state.isLoading = true;

        try {
            const body = {
                pagination: {
                    page,
                    pageSize,
                    type: "page",
                    order: "DESC",
                    sortBy: "year"
                },
                ageRestriction,
                year: yearRange
            };

            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω) - –ü–ï–†–í–´–ô –ü–†–ò–û–†–ò–¢–ï–¢
            if (contentTypeId) {
                body.contentTypeId = Array.isArray(contentTypeId) ? contentTypeId : [contentTypeId];
                // console.log(`üéØ –°–ª–∞–π–¥–µ—Ä ${containerId}: –ö–∞—Ç–µ–≥–æ—Ä–∏—è`, getContentTypeName(contentTypeId));
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∂–∞–Ω—Ä—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω) - –í–¢–û–†–û–ô –ü–†–ò–û–†–ò–¢–ï–¢
            if (genreId) {
                body.genreId = Array.isArray(genreId) ? genreId : [genreId];
                // console.log(`üéØ –°–ª–∞–π–¥–µ—Ä ${containerId}: –ñ–∞–Ω—Ä`, getGenreName(genreId));
            }

            // –ï—Å–ª–∏ yearRange –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–µ—Ç –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–æ–≤—ã—Ö
            if (!yearRange || yearRange.length === 0) {
                const currentYear = new Date().getFullYear();
                body.year = [currentYear, currentYear - 1, currentYear - 2, currentYear - 3, currentYear - 4];
            }

            // console.log(`üì¶ –ó–∞–ø—Ä–æ—Å –¥–ª—è ${containerId}:`, body);

            const res = await fetch(`${API.BASE}/v1/contents/details`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${API.KEY}`,
                },
                body: JSON.stringify(body),
            });

            if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);

            const data = await res.json();
            let movies = data?.data || [];

            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∏–ª—å–º—ã –±–µ–∑ –ø–æ—Å—Ç–µ—Ä–∞
            const moviesWithPoster = movies.filter(movie => {
                const hasPoster = movie.posterUrl &&
                    movie.posterUrl.trim() !== '' &&
                    !movie.posterUrl.includes('default.jpg') &&
                    !movie.posterUrl.includes('via.placeholder.com');

                if (!hasPoster) {
                    console.log(`üö´ –°–∫—Ä—ã—Ç —Ñ–∏–ª—å–º –±–µ–∑ –ø–æ—Å—Ç–µ—Ä–∞: "${movie.title}" (ID: ${movie.id})`);
                }

                return hasPoster;
            });

            // –§–∏–ª—å—Ç—Ä—É–µ–º –º—É–ª—å—Ç–∏–∫–∏ (–µ—Å–ª–∏ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –≤ —ç—Ç–æ–º —Å–ª–∞–π–¥–µ—Ä–µ)
            let filteredMovies = moviesWithPoster;

            return filteredMovies;
        } catch (err) {
            console.error("API error:", err.message);
            return [];
        } finally {
            state.isLoading = false;
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤
    const displayMovies = (movies) => {
        const moviesHTML = movies.map(m => createSlideHTML(m)).join('');

        if (state.currentPage === 1) {
            swiperWrapper.innerHTML = moviesHTML;
            state.allMovies = movies;
        } else {
            swiperWrapper.insertAdjacentHTML('beforeend', moviesHTML);
            state.allMovies = [...state.allMovies, ...movies];
        }
    };

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—Ç–∏—é —Ñ–∏–ª—å–º–æ–≤
    const firstBatch = await loadMovies(1, LOAD_CONFIG.INITIAL_LOAD);
    if (firstBatch.length === 0) {
        swiperWrapper.innerHTML = `<p style="color:white;text-align:center;">–ù–µ—Ç —Ñ–∏–ª—å–º–æ–≤</p>`;
        return;
    }

    displayMovies(firstBatch);
    state.currentPage = 2;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Swiper
    const swiper = new Swiper(swiperClass, {
        slidesPerView: 6,
        spaceBetween: 10,
        freeMode: true,
        navigation: {
            nextEl: nextBtnClass,
            prevEl: prevBtnClass,
        },
        breakpoints: {
            0: { slidesPerView: 2, },
            640: { slidesPerView: 3, },
            768: { slidesPerView: 4, },
            1024: { slidesPerView: 6, },
        },
        on: {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—à–µ–ª –¥–æ —Å–µ—Ä–µ–¥–∏–Ω—ã
            slideChange: function () {
                const state = sliderStates.get(containerId);
                if (!state || state.isLoading || !state.hasMore) return;

                const totalSlides = this.slides.length;
                const currentIndex = this.activeIndex;
                const slidesPerView = this.params.slidesPerView;

                const progress = currentIndex / Math.max(1, totalSlides - slidesPerView);
                const slidesSinceLastLoad = currentIndex - state.lastLoadIndex;

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏ 50% –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20%
                const shouldTrigger =
                    (slidesSinceLastLoad >= 5 && progress >= LOAD_CONFIG.TRIGGER_LOAD_AT) ||
                    progress >= 0.8;

                if (shouldTrigger) {
                    state.lastLoadIndex = currentIndex;
                    loadMoreMovies();
                }
            },

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∫–æ–Ω—Ü–∞
            reachEnd: function () {
                const state = sliderStates.get(containerId);
                if (state && !state.isLoading && state.hasMore) {
                    loadMoreMovies();
                }
            }
        }
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
    async function loadMoreMovies() {
        const state = sliderStates.get(containerId);

        if (state.isLoading || !state.hasMore) return;

        const newMovies = await loadMovies(state.currentPage, LOAD_CONFIG.LOAD_MORE);
        if (newMovies.length > 0) {
            displayMovies(newMovies);

            // –û–±–Ω–æ–≤–ª—è–µ–º Swiper –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–∞–π–¥–æ–≤
            setTimeout(() => {
                swiper.update();
            }, 100);

            state.currentPage++;
        }
    }

    return swiper;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è HTML –¥–ª—è —Å–ª–∞–π–¥–∞
function createSlideHTML(movie) {
    const poster = movie.posterUrl;
    const title = movie.title || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è";
    const year = movie.year || "";
    const veoId = 'v' + movie.id || null;
    const rating = movie.ratings?.kinopoisk?.rating || '';
    const showRating = rating > 0;
    const ratingColor = rating >= 7 ? '#4eca00ff' : '#ebba16';
    const videoQuality = movie.videoQuality || '';

    return `
        <div class="swiper-slide">
            <a href='./movie.html?id=${veoId}&${movie.originalTitle ? movie.originalTitle.replace(/\s+/g, '_') : title.replace(/\s+/g, '_')}' style="background-image: url(${poster})" class="slide-item">
                <div class="top_properties">
                    <span class="videoQuality">${videoQuality}</span>
                    <span class="rating" style="display:${showRating ? 'block' : 'none'}; color: ${ratingColor};">
                        ${rating}‚òÖ
                    </span>
                </div>
                <div class="slide-info">
                    <h4>${title} : ${year}</h4>
                </div>
            </a>
            <div class='properties_inne' id="${veoId}">
                <img src='./assets/img/bookmark.png' alt="–î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏">
            </div>
        </div>
    `;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
function getContentTypeName(typeId) {
    const types = {
        "1": "3D",
        "2": "–°–µ—Ä–∏–∞–ª—ã",
        "3": "–î–æ–∫—É—Ñ–∏–ª—å–º—ã",
        "4": "–§–∏–ª—å–º—ã",
        "5": "–î–æ–∫—É—Å–µ—Ä–∏–∞–ª—ã",
        "6": "–ö–æ–Ω—Ü–µ—Ä—Ç—ã",
        "7": "–¢–í –®–æ—É",
        "10": "–ú—É–ª—å—Ç—Å–µ—Ä–∏–∞–ª",
        "11": "–ê–Ω–∏–º–µ",
        "12": "–ú—É–ª—å—Ç—Ñ–∏–ª—å–º"
    };
    return types[typeId] || `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${typeId}`;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∂–∞–Ω—Ä–∞ –ø–æ ID
function getGenreName(genreId) {
    const genres = {
        "1": "–ö–æ–º–µ–¥–∏—è",
        "2": "–°–µ–º–µ–π–Ω—ã–π",
        "3": "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è",
        "4": "–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π",
        "5": "–ú—É–ª—å—Ç—Ñ–∏–ª—å–º",
        "6": "–ö—Ä–∏–º–∏–Ω–∞–ª",
        "7": "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
        "8": "–ë–æ–µ–≤–∏–∫",
        "9": "–§—ç–Ω—Ç–µ–∑–∏",
        "10": "–î—Ä–∞–º–∞",
        "11": "–£–∂–∞—Å—ã",
        "12": "–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π",
        "13": "–¢—Ä–∏–ª–ª–µ—Ä",
        "14": "–ë–∏–æ–≥—Ä–∞—Ñ–∏—è",
        "15": "–ú–µ–ª–æ–¥—Ä–∞–º–∞",
        "16": "–î–µ—Ç–µ–∫—Ç–∏–≤",
        "17": "–í–æ–µ–Ω–Ω—ã–π",
        "18": "–í–µ—Å—Ç–µ—Ä–Ω",
        "19": "–°–ø–æ—Ä—Ç",
        "20": "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π",
        "21": "–ö–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–∫–∞",
        "40": "–ê–Ω–∏–º–µ",
        "138": "–î–µ—Ç—Å–∫–∏–π",
        "106": "–î–æ—Ä–∞–º–∞"
    };
    return genres[genreId] || `–ñ–∞–Ω—Ä ${genreId}`;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–ª–∞–π–¥–µ—Ä–æ–≤
async function initAllSliders() {
    const slidersConfig = [
        {
            containerId: "categorySlider_2",
            swiperClass: '.mySwiper2',
            nextBtnClass: '.swiper-button-next2',
            prevBtnClass: '.swiper-button-prev2',
            contentTypeId: CONTENT_TYPES.MOVIE, // –¢–û–õ–¨–ö–û –§–∏–ª—å–º—ã
            genreId: 8, // –ë–æ–µ–≤–∏–∫
            yearRange: [dhis_year, dhis_year - 1, dhis_year - 2, dhis_year - 3, dhis_year - 4, dhis_year - 5, dhis_year - 6],
        },
        {
            containerId: "categorySlider_3",
            swiperClass: '.mySwiper3',
            nextBtnClass: '.swiper-button-next3',
            prevBtnClass: '.swiper-button-prev3',
            contentTypeId: [CONTENT_TYPES.MOVIE, CONTENT_TYPES.SERIES],  // –§–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã
            genreId: 7, // –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞
            yearRange: [dhis_year, dhis_year - 1, dhis_year - 2, dhis_year - 3, dhis_year - 4, dhis_year - 5, dhis_year - 6],
        },
        {
            containerId: "categorySlider_4",
            swiperClass: '.mySwiper4',
            nextBtnClass: '.swiper-button-next4',
            prevBtnClass: '.swiper-button-prev4',
            contentTypeId: [CONTENT_TYPES.MULTFILM, CONTENT_TYPES.MULTSERIAL], // –¢–û–õ–¨–ö–û –º—É–ª—å—Ç–∏–∫–∏
            genreId: 5, // –ú—É–ª—å—Ç—Ñ–∏–ª—å–º
            yearRange: [dhis_year, dhis_year - 1, dhis_year - 2, dhis_year - 3, dhis_year - 4, dhis_year - 5, dhis_year - 6],
        },
        {
            containerId: "categorySlider_5",
            swiperClass: '.mySwiper5',
            nextBtnClass: '.swiper-button-next5',
            prevBtnClass: '.swiper-button-prev5',
            contentTypeId: CONTENT_TYPES.MOVIE, // –¢–û–õ–¨–ö–û –§–∏–ª—å–º—ã
            genreId: 1, // –ö–æ–º–µ–¥–∏—è
            yearRange: [dhis_year, dhis_year - 1, dhis_year - 2, dhis_year - 3, dhis_year - 4, dhis_year - 5, dhis_year - 6],
        },
        {
            containerId: "categorySlider_6",
            swiperClass: '.mySwiper6',
            nextBtnClass: '.swiper-button-next6',
            prevBtnClass: '.swiper-button-prev6',
            contentTypeId: CONTENT_TYPES.MOVIE, // –¢–û–õ–¨–ö–û –§–∏–ª—å–º—ã
            genreId: 13, // –¢—Ä–∏–ª–ª–µ—Ä
            yearRange: [dhis_year, dhis_year - 1, dhis_year - 2, dhis_year - 3, dhis_year - 4, dhis_year - 5, dhis_year - 6],
        },
        {
            containerId: "categorySlider_7",
            swiperClass: '.mySwiper7',
            nextBtnClass: '.swiper-button-next7',
            prevBtnClass: '.swiper-button-prev7',
            contentTypeId: CONTENT_TYPES.MOVIE, // –¢–û–õ–¨–ö–û –§–∏–ª—å–º—ã
            genreId: 10, // –î—Ä–∞–º–∞
            yearRange: [dhis_year, dhis_year - 1, dhis_year - 2, dhis_year - 3, dhis_year - 4, dhis_year - 5, dhis_year - 6],
        },
        {
            containerId: "categorySlider_8",
            swiperClass: '.mySwiper8',
            nextBtnClass: '.swiper-button-next8',
            prevBtnClass: '.swiper-button-prev8',
            contentTypeId: CONTENT_TYPES.MOVIE, // –¢–û–õ–¨–ö–û –°–µ—Ä–∏–∞–ª—ã
            genreId: 11, // –£–∂–∞—Å—ã
            yearRange: [dhis_year, dhis_year - 1, dhis_year - 2, dhis_year - 3, dhis_year - 4, dhis_year - 5, dhis_year - 6],
        },
        {
            containerId: "categorySlider_9",
            swiperClass: '.mySwiper9',
            nextBtnClass: '.swiper-button-next9',
            prevBtnClass: '.swiper-button-prev9',
            contentTypeId: [CONTENT_TYPES.ANIME], // –¢–û–õ–¨–ö–û ANIME
            // genreId: 40, // –ê–Ω–∏–º–µ
            yearRange: [dhis_year, dhis_year - 1, dhis_year - 2, dhis_year - 3, dhis_year - 4, dhis_year - 5, dhis_year - 6],

        },
        {
            containerId: "categorySlider_10",
            swiperClass: '.mySwiper10',
            nextBtnClass: '.swiper-button-next10',
            prevBtnClass: '.swiper-button-prev10',
            contentTypeId: CONTENT_TYPES.SERIES, // –¢–û–õ–¨–ö–û –°–µ—Ä–∏–∞–ª—ã
            genreId: 3, // –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è
            yearRange: [dhis_year, dhis_year - 1, dhis_year - 2, dhis_year - 3, dhis_year - 4, dhis_year - 5, dhis_year - 6],
        },
        {
            containerId: "categorySlider_11",
            swiperClass: '.mySwiper11',
            nextBtnClass: '.swiper-button-next11',
            prevBtnClass: '.swiper-button-prev11',
            contentTypeId: [CONTENT_TYPES.MOVIE, CONTENT_TYPES.SERIES, CONTENT_TYPES.DOCUMENTARY, CONTENT_TYPES.DOCSERIES, CONTENT_TYPES.CONCERT], // –§–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã
            genreId: 106, // –î–æ—Ä–∞–º–∞
            yearRange: [dhis_year, dhis_year - 1, dhis_year - 2, dhis_year - 3, dhis_year - 4, dhis_year - 5, dhis_year - 6, dhis_year - 7, dhis_year - 8, dhis_year - 9, dhis_year - 10, dhis_year - 11, dhis_year - 12, dhis_year - 13, dhis_year - 14, dhis_year - 15, dhis_year - 16, dhis_year - 17, dhis_year - 18],
}
    ];

// console.log('üé¨ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–õ–ê–ô–î–ï–†–û–í:');
// slidersConfig.forEach(config => {
//     console.log(`üì∫ ${config.containerId}:`);
//     console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${getContentTypeName(config.contentTypeId)}`);
//     console.log(`   –ñ–∞–Ω—Ä: ${getGenreName(config.genreId)}`);
//     console.log(`   –ú—É–ª—å—Ç–∏–∫–∏: ${config.allowMultfilms ? '‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω—ã' : '‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω—ã'}`);
// });

await Promise.all(slidersConfig.map(config => createSlider(config)));
initPlayButtons();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
function initPlayButtons() {
    document.addEventListener('click', (e) => {
        if (e.target.classList.contains('play_id')) {
            const kinopoiskId = e.target.id;
        }

        if (e.target.closest('.properties_inne')) {
            const kinopoiskId = e.target.id;
            console.log('–î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏ - ', kinopoiskId);
        }
    });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async function initSliders() {
    try {
        await initAllSliders();
            if (typeof genloader_hide === 'function') {
                genloader_hide();
            }
    } catch (error) {
        console.error('Error initializing sliders:', error);
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', initSliders);